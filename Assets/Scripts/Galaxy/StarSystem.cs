//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;
using UnityEngine;

public class StarSystem
{
	public List<CBody> cBodies = new List <CBody>();
	public Vector3 pos;
	public string name;
	static string[] PLANET_NAMES = {null,"I", "II", "III","IV","V","VI","VII","VIII","IX","X","XI","XII","XIII","XIV","XV","XVI","XVII","XVIII","XIX","XX","XXI"};
	static string[] MOON_NAMES = { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j" };

    public Star star
    {
        get { return (Star)cBodies[0]; }
    }

	public StarSystem(Vector3 _pos, string _name)
	{
		pos = _pos;
		name = _name;
		float radius = Mathf.Exp(BellCurve.random(13.96f, .437f, 1.45f));
		float solarRadius = radius / 696000f;
		Star star = new Star/*Debug sun data: (0, 0, 696000f, 1.41f, 100f);*/(0f, 0f, radius,
			BellCurve.random(1.45f, .47f, 1.3f) * Mathf.Pow(solarRadius, -1.5f),
			BellCurve.random(6250f, 2180f, 2500f) * Mathf.Pow(solarRadius, .8f),this);
		cBodies.Add(star);
		float parentMass = star.mass;
		for (int i = 0; i < 20; i++) {
			for (int retries = 0; retries < 3; retries++) {
				Planet planet = new Planet(star, this);
                if (hillSphereCheck(planet, cBodies, parentMass))
                {
                    cBodies.Add(planet);
                    break;
                }
			}
            if (Random.value < .32f/(Mathf.Pow(star.solarMass, 2/3f))){
				break;
			}
		}
        star.name = name;
    }


		//naming of planets and moons within the system
	public void NameNSort()
    {
        cBodies.Sort();
		for (int i = 0; i < cBodies.Count; i++)
		{
			cBodies[i].name = name + " " + PLANET_NAMES[i];
			cBodies[i].children.Sort();
			for (int j = 0; j < cBodies[i].children.Count; j++)
			{
				cBodies[i].children[j].name = cBodies[i].name + MOON_NAMES[j];
			}
		}
    }


    public static bool hillSphereCheck(CBody cBody, IList<CBody> others, float parentMass)
    {
        foreach (CBody otherCBody in others)
        {
            float gap = Mathf.Abs(cBody.aphelion - otherCBody.aphelion);
            if (cBody.hillSphere(parentMass) > gap || otherCBody.hillSphere(parentMass) > gap)
            {
                return false;
            }
        }
        return true;
    }

    public IEnumerable<CBody> deepCBodies
    {
        get
        {
            foreach (var cBody in cBodies)
            {
                yield return cBody;
                foreach (var moon in cBody.children)
                {
                    yield return moon;
                }
            }
        }
    }

    public float distance(StarSystem system)
    {
        return Vector3.Distance(pos, system.pos)/4;
    }
}

